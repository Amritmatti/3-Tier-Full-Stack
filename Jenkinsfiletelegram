pipeline {
    agent any

    environment {
        APPLICATION_NAME = 'WEBAPP'
        BRANCH_NAME = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
        MERGED_BRANCH = script {
            def mergedBranch = sh(returnStdout: true, script: '''
                git log --merges --first-parent --oneline -n 1 |
                grep "Merge pull request" |
                awk '{print $5}' ||
                echo "Unknown"
            ''').trim()

            if (mergedBranch.contains('/')) {
                return mergedBranch.split('/')[1]
            } else {
                return "Unknown"
            }
        }
    }

    stages {
        stage('build user') {
            steps {
                wrap([$class: 'BuildUser']) {
                    script {
                        env.BUILD_USER_ID = env.BUILD_USER ?: 'Unknown'
                    }
                    echo "Triggered by: ${BUILD_USER_ID}"
                }
            }
        }

        stage('Notify Start') {
            steps {
                withCredentials([
                    string(credentialsId: 'telegram_token', variable: 'TOKEN'),
                    string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')
                ]) {
                    script {
                        sh '''
                        CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S")
                        curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
                            -d "chat_id=${CHAT_ID}" \
                            -d text="Job Name: ${JOB_NAME}\nApplication: ${APPLICATION_NAME}\nUsername: ${BUILD_USER_ID}\nBuild Url: ${BUILD_URL}\nBuild Number: ${BUILD_NUMBER}\nBranch: ${BRANCH_NAME}\nMerged Branch: ${MERGED_BRANCH}\nDate/Time: ${CURRENT_DATE}\nStatus: üöÄ Deployment Started üöÄ"
                        '''
                    }
                }
            }
        }

        stage('Execute JUnit Test & Build jar file') {
            steps {
                dir('src') {
                    script {
                        try {  
                            // Your test command here
                            sh 'echo test' // Replace with your actual test command
                            // Simulate a failure for demonstration purposes
                            // sh 'exit 1' // Uncomment to simulate a failure
                        } catch (err) {
                            echo err.getMessage()
                            withCredentials([
                                string(credentialsId: 'telegram_token', variable: 'TOKEN'),
                                string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')
                            ]) {
                                script {
                                    sh '''
                                    CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S")
                                    curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
                                        -d "chat_id=${CHAT_ID}" \
                                        -d text="Job Name: ${JOB_NAME}\nApplication: ${APPLICATION_NAME}\nUsername: ${BUILD_USER_ID}\nBuild Url: ${BUILD_URL}\nBuild Number: ${BUILD_NUMBER}\nBranch: ${BRANCH_NAME}\nMerged Branch: ${MERGED_BRANCH}\nDate/Time: ${CURRENT_DATE}\nStatus: ‚ùå Failed to build üò±"
                                    '''
                                }
                            }
                            sh 'exit 1'
                        }
                    }
                }
            }
        }

        stage('Finished msg') {
            steps {
                withCredentials([
                    string(credentialsId: 'telegram_token', variable: 'TOKEN'),
                    string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')
                ]) {
                    script {
                        sh '''
                        CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S")
                        curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
                            -d "chat_id=${CHAT_ID}" \
                            -d text="Job Name: ${JOB_NAME}\nApplication: ${APPLICATION_NAME}\nUsername: ${BUILD_USER_ID}\nBuild Url: ${BUILD_URL}\nBuild Number: ${BUILD_NUMBER}\nBranch: ${BRANCH_NAME}\nMerged Branch: ${MERGED_BRANCH}\nDate/Time: ${CURRENT_DATE}\nStatus: ‚úÖ Build successfully üòä"
                        '''
                    }
                }
            }
        }
    }
}
