pipeline {
    agent any

    environment {
        APPLICATION_NAME = 'WEBAPP'
    }

    stages {
        stage('Clone Code From Repo') {
            steps {
                // Get some code from a GitHub repository
                git branch: 'main', url: 'https://github.com/Amritmatti/Harbor_CICD_Pipeline.git'
            }
        }        
        stage('Collecting Build User Name') {
            steps {
                // Collection username of user who has started job
                wrap([$class: 'BuildUser']) {
                    script {
                        env.BUILD_USER_ID = env.BUILD_USER ?: 'Unknown'
                    }
                }
            }
        }
        stage('Collecting Env\'s') {
            steps {
                // Collecting Git Branch and Merged Branch Name
                script {
                    env.SOURCE_BRANCH = sh(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()

                    env.MERGED_BRANCH = sh(
                        script: '''
                            git log --merges --first-parent --oneline -n 1 | grep "Merge pull" | \
                            awk '{print $7}' | cut -d "/" -f 2
                        ''',
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Notify Start') {
            // Sending Alert for build start
            steps {
                withCredentials([
                    string(credentialsId: 'telegram_token', variable: 'TOKEN'),
                    string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')
                ]) {
                    script {
                        sh '''
                        CURRENT_DATE=$(date)
                        curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
                            -d "chat_id=${CHAT_ID}" \
                            -d text="Application: ${APPLICATION_NAME}\nUser: ${BUILD_USER_ID}\nBuild Url: ${BUILD_URL}\nBuild Number: ${BUILD_NUMBER}\nDeployment Branch: ${SOURCE_BRANCH}\nMerged Branch: ${SOURCE_BRANCH} ‚Üê ${MERGED_BRANCH}\nDate/Time: ${CURRENT_DATE}\nStatus: üöÄ Deployment Started üöÄ"
                        '''
                    }
                }
            }
        }

        stage('Execute JUnit Test & Build jar file') {
            steps {
                // Performing Job Steps and send alert if job failed due to any issue
                dir('src') {
                    script {
                        // Your test command here
                        sh 'sleep 1m' // Replace with your actual test command
                    }
                }
            }
        }

        stage('Finished msg') {
            // This stage is only for a successful build
            steps {
                withCredentials([
                    string(credentialsId: 'telegram_token', variable: 'TOKEN'),
                    string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')
                ]) {
                    script {
                        sh '''
                        CURRENT_DATE=$(date)
                        curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
                            -d "chat_id=${CHAT_ID}" \
                            -d text="Application: ${APPLICATION_NAME}\nUser: ${BUILD_USER_ID}\nBuild Url: ${BUILD_URL}\nBuild Number: ${BUILD_NUMBER}\nDeployment Branch: ${SOURCE_BRANCH}\nMerged Branch: ${SOURCE_BRANCH} ‚Üê ${MERGED_BRANCH}\nDate/Time: ${CURRENT_DATE}\nStatus: ‚úÖ Build successfully üòä"
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            // This block runs if the build is successful
            echo 'Build succeeded!'
        }

        failure {
            // This block runs if the build fails
            withCredentials([
                string(credentialsId: 'telegram_token', variable: 'TOKEN'),
                string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')
            ]) {
                script {
                    sh '''
                    CURRENT_DATE=$(date)
                    curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
                        -d "chat_id=${CHAT_ID}" \
                        -d text="Application: ${APPLICATION_NAME}\nUser: ${BUILD_USER_ID}\nBuild Url: ${BUILD_URL}\nBuild Number: ${BUILD_NUMBER}\nDeployment Branch: ${SOURCE_BRANCH}\nMerged Branch: ${SOURCE_BRANCH} ‚Üê ${MERGED_BRANCH}\nDate/Time: ${CURRENT_DATE}\nStatus: ‚ùå Failed to build üò±"
                    '''
                }
            }
        }

        aborted {
            // This block runs if the build is aborted
            withCredentials([
                string(credentialsId: 'telegram_token', variable: 'TOKEN'),
                string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')
            ]) {
                script {
                    sh '''
                    CURRENT_DATE=$(date)
                    curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
                        -d "chat_id=${CHAT_ID}" \
                        -d text="Application: ${APPLICATION_NAME}\nUser: ${BUILD_USER_ID}\nBuild Url: ${BUILD_URL}\nBuild Number: ${BUILD_NUMBER}\nDeployment Branch: ${SOURCE_BRANCH}\nMerged Branch: ${SOURCE_BRANCH} ‚Üê ${MERGED_BRANCH}\nDate/Time: ${CURRENT_DATE}\nStatus: ‚ö†Ô∏è Build aborted ‚ö†Ô∏è"
                    '''
                }
            }
        }
    }
}
